[
    {
        "kind": 1,
        "language": "markdown",
        "value": "# Disclaimer\n\nThis notebook is intended to document what steps you have to perform in order to be able to fire queries against the bookshop.\n\nHowever, it is currently not possible to use it interactively as you might expect of a cap notebook.\n\nWe are working on making interactive `cds repl` sessions work with cap notebooks, so stay tuned!\n\nFor the time being, please copy the commands - one after another - into your shell and execute them there.\nTo actually run a query within you `cds repl` session, prepend the `await` keyword.\n\nUsually, a CQN query in the new database services will undergo two main steps before being sent to the database:\n\n1. the CQN is _normalized_ so that we have a \"SQL-Like\" CQN\n2. the _normalized_ CQN is rendered to the specific database dialect\n\nYou can observe the normalization (1.) by appending `forSQL()` to your query.\nYou can observe the final SQL string (2.) by appending `toSQL()` to your query.\n\nFor example, in your `cds repl` session you can execute the following to insights into the normalization:\n\n```\nSELECT`from ${Books} {\n    title as book,\n    author.name as author,\n    genre.name as genre\n}`.forSQL()\n```\n",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "### Prerequisites",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "npm install",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "npm add @cap-js/sqlite\nnpm add @cap-js/postgres # if you wish, you can also execute everything below with `@cap-js/postgres`",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "### Observe that the default db profile has been changed to the new DB drivers",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "cds env requires.db # --profile pg",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "#### Postgres only: deploy the bookshop data",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "cds deploy bookshop --profile pg",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "### Start an interactive `cds repl` session",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "shell",
        "value": "cds repl # --profile pg",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "### Start a bookshop instance",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "cds",
        "value": "var { server } = cds.test('@capire/bookshop')",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "### With cds.reflect, remember some entities for simpler queries ",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "cds",
        "value": "{ Books, Authors } = cds.entities",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "### Support for Path expression",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "cds",
        "value": "// read all Books and join them with their Authors and Genre\nSELECT`from ${Books} {\n    title as book,\n    author.name as author,\n    genre.name as genre\n}`",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "### Use `exists` predicate",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "cds",
        "value": "// Insert new Author, which has not yet written a book\nawait INSERT.into(Authors).entries( { name: 'Upcoming Author' } )\n\n// Select all Authors which have written at least one book\nSELECT`from ${Authors} {\n    name as author,\n    count(books.ID) as bookCount\n} where not exists books\n  group by $self.author`",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "### Mappings for OData and SAP HANA Functions",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "cds",
        "value": "// Select average author age\n// `average` is an OData function, while `years_between` is a SAP HANA native function\nSELECT`from ${Authors} {\n    books.genre.name as genre,\n    average(\n            years_between( dateOfBirth, dateOfDeath )\n           ) as averageAuthorAge\n} group by $self.genre`",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "### Improved `expand`",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "cds",
        "value": "// Select all Authors with a list of all their books\nSELECT`from ${Authors} {\n    name as author,\n    books {\n            title,\n            genre { name }\n        }\n}`",
        "outputs": []
    },
    {
        "kind": 1,
        "language": "markdown",
        "value": "### New `SELECT.localized` options",
        "outputs": []
    },
    {
        "kind": 2,
        "language": "cds",
        "value": "// Insert a new translation for a Book\nawait INSERT.into(Books.texts).entries(\n    {\n        ID: 201,\n        locale: 'es',\n        title: 'Cumbres borrascosas',\n        descr: 'Cumbres Borrascosas es la única novela de la escritora inglesa Emily Brontë (1818-1848). Publicada en 1847 bajo el seudónimo de Ellis Bell, la novela fue rechazada en gran medida por el público victoriano y ahora se considera un clásico de la ficción británica del siglo XIX.'\n    }\n)\n\n// set new default `locale`\ncds.context = { locale: 'es' }\n\n// query localized version of \"Wuthering Heights\"\nawait SELECT.localized(Books).where('ID = 201')",
        "outputs": []
    }
]